import jsPDF from 'jspdf'
import { Message } from '@/types/chat'

/**
 * Export conversation messages to a PDF document
 * @param messages - Array of messages to export
 * @param filename - Name of the PDF file (without extension)
 */
export function exportToPDF(messages: Message[], filename: string = 'junas-conversation'): void {
  const doc = new jsPDF()

  // Add Junas metadata to PDF properties
  doc.setProperties({
    title: 'Junas Legal Consultation',
    subject: 'AI-Generated Legal Consultation',
    author: 'Junas - Legal AI Assistant',
    keywords: '__JUNAS_EXPORT__:true __JUNAS_VERSION__:1.0.0 __JUNAS_SIGNATURE__:JUNAS_LEGAL_AI_EXPORT',
    creator: 'Junas Legal AI Assistant'
  })

  // Document settings
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 20
  const maxWidth = pageWidth - 2 * margin
  let yPosition = margin

  // Header
  doc.setFontSize(18)
  doc.setFont('helvetica', 'bold')
  doc.text('Junas Legal Consultation', margin, yPosition)
  yPosition += 10

  doc.setFontSize(10)
  doc.setFont('helvetica', 'normal')
  doc.setTextColor(100)
  doc.text(`Generated on: ${new Date().toLocaleString()}`, margin, yPosition)
  yPosition += 5
  doc.text(`Total messages: ${messages.length}`, margin, yPosition)
  yPosition += 5

  // Add visible signature for validation
  doc.setFontSize(6)
  doc.setTextColor(240)
  doc.text('__JUNAS_EXPORT__:true __JUNAS_VERSION__:1.0.0 __JUNAS_SIGNATURE__:JUNAS_LEGAL_AI_EXPORT', margin, yPosition)
  yPosition += 10

  // Legal disclaimer
  doc.setFillColor(255, 243, 205) // Light yellow background
  doc.rect(margin - 5, yPosition - 5, maxWidth + 10, 20, 'F')
  doc.setFontSize(9)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(0)
  doc.text('LEGAL DISCLAIMER:', margin, yPosition)
  yPosition += 5
  doc.setFont('helvetica', 'normal')
  doc.setTextColor(100)
  const disclaimer = 'This document contains AI-generated content and does not constitute legal advice. Consult a qualified lawyer for specific legal matters.'
  const disclaimerLines = doc.splitTextToSize(disclaimer, maxWidth)
  doc.text(disclaimerLines, margin, yPosition)
  yPosition += disclaimerLines.length * 5 + 15

  // Messages
  messages.forEach((message, index) => {
    // Check if we need a new page
    if (yPosition > pageHeight - 40) {
      doc.addPage()
      yPosition = margin
    }

    // Message header
    doc.setFontSize(11)
    doc.setFont('helvetica', 'bold')
    const isUser = message.role === 'user'
    const headerText = isUser ? 'User' : 'Junas (AI Assistant)'
    const timestamp = message.timestamp ? new Date(message.timestamp).toLocaleString() : ''

    // Blue for user, green for assistant
    if (isUser) {
      doc.setTextColor(31, 119, 180)
    } else {
      doc.setTextColor(72, 187, 120)
    }
    doc.text(headerText, margin, yPosition)

    if (timestamp) {
      doc.setFontSize(8)
      doc.setTextColor(150)
      doc.text(timestamp, margin + 50, yPosition)
    }

    yPosition += 7

    // Message content
    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(0)

    // Handle long text with word wrapping
    const contentLines = doc.splitTextToSize(message.content, maxWidth)

    // Check if content fits on current page
    const contentHeight = contentLines.length * 6
    if (yPosition + contentHeight > pageHeight - margin) {
      doc.addPage()
      yPosition = margin
    }

    contentLines.forEach((line: string) => {
      doc.text(line, margin, yPosition)
      yPosition += 6
    })

    // Add spacing between messages
    yPosition += 8

    // Add separator line between messages (except for last)
    if (index < messages.length - 1) {
      doc.setDrawColor(200)
      doc.line(margin, yPosition - 4, pageWidth - margin, yPosition - 4)
      yPosition += 4
    }
  })

  // Footer on last page
  doc.setFontSize(8)
  doc.setTextColor(150)
  doc.text(
    'Generated by Junas - AI Legal Assistant for Singapore Law',
    pageWidth / 2,
    pageHeight - 10,
    { align: 'center' }
  )

  // Save the PDF
  doc.save(`${filename}.pdf`)
}

/**
 * Export conversation summary to PDF (shorter version)
 * @param messages - Array of messages to export
 * @param filename - Name of the PDF file (without extension)
 */
export function exportSummaryToPDF(messages: Message[], filename: string = 'junas-summary'): void {
  const doc = new jsPDF()

  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 20
  const maxWidth = pageWidth - 2 * margin
  let yPosition = margin

  // Header
  doc.setFontSize(18)
  doc.setFont('helvetica', 'bold')
  doc.text('Junas Consultation Summary', margin, yPosition)
  yPosition += 10

  doc.setFontSize(10)
  doc.setFont('helvetica', 'normal')
  doc.setTextColor(100)
  doc.text(`Generated on: ${new Date().toLocaleString()}`, margin, yPosition)
  yPosition += 15

  // Summary statistics
  const userMessages = messages.filter(m => m.role === 'user')
  const assistantMessages = messages.filter(m => m.role === 'assistant')

  doc.setFontSize(11)
  doc.setFont('helvetica', 'bold')
  doc.text('Summary Statistics:', margin, yPosition)
  yPosition += 7
  doc.setFont('helvetica', 'normal')
  doc.text(`Total Messages: ${messages.length}`, margin + 5, yPosition)
  yPosition += 5
  doc.text(`User Questions: ${userMessages.length}`, margin + 5, yPosition)
  yPosition += 5
  doc.text(`AI Responses: ${assistantMessages.length}`, margin + 5, yPosition)
  yPosition += 15

  // Key topics (first and last user questions)
  if (userMessages.length > 0) {
    doc.setFont('helvetica', 'bold')
    doc.text('Initial Query:', margin, yPosition)
    yPosition += 7
    doc.setFont('helvetica', 'normal')
    const firstQuery = doc.splitTextToSize(userMessages[0].content, maxWidth - 5)
    doc.text(firstQuery, margin + 5, yPosition)
    yPosition += firstQuery.length * 5 + 10

    if (userMessages.length > 1) {
      doc.setFont('helvetica', 'bold')
      doc.text('Final Query:', margin, yPosition)
      yPosition += 7
      doc.setFont('helvetica', 'normal')
      const lastQuery = doc.splitTextToSize(userMessages[userMessages.length - 1].content, maxWidth - 5)
      doc.text(lastQuery, margin + 5, yPosition)
      yPosition += lastQuery.length * 5 + 10
    }
  }

  // Disclaimer
  yPosition += 10
  doc.setFontSize(9)
  doc.setTextColor(150)
  const disclaimer = 'This summary contains AI-generated content. Always consult a qualified lawyer for legal advice.'
  const disclaimerLines = doc.splitTextToSize(disclaimer, maxWidth)
  doc.text(disclaimerLines, margin, yPosition)

  // Save
  doc.save(`${filename}.pdf`)
}
